set opened = {initial States}
set closed = null

bool succes = False
while (opened != null) and (succes == False):
	state e = select_according_to_A-star_strategy_in(opened)
	if (e == final_state):
		succes = True
	else:
		opened.remove(e)
		closed.add(e)
		for child in Expanded(e):
			if (child not in opened) and (child not in closed):
				opened.add(child)
				child.parent = e
				child.g = e.g + cost(from e -> child)
			else: # child is in 'opened' or in 'closed'
				if (child.g > e.g + cost(from e -> child)):	#cost(from e -> child) = 1
					child.g = e.g + cost(from e -> child)
					child.parent = e
					if (child in closed):
						closed.remove(child)
						opened.add(child)

if (succes == True):
	print_puzle()
else:
	prin('no solution found')


#					if (old_child.level > child.level):
#						old_child.parent = min_state
#						old_child.cost = child.cost
#						if (is_child_in_closed == True):
#							closed.remove(old_child)
#							opened.push(old_child)


# hashing closed
# check cornners + diagonal next one


